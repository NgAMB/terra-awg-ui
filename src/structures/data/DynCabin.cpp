#include "structures/data/Homes.h"

namespace
{
// clang-format off
std::vector<std::vector<uint16_t>> cabinLeftData{
// cabinLeft1
{
    519, 36864, 30, 24, 4097, 30, 4096, 10, 72, 432, 4096, 10, 54, 450, 4096,
    10, 72, 468, 4096, 38, 4096, 30, 45056, 30, 5, 32, 8192, 5, 8192, 27, 8193,
    4, 4096, 38
},
// cabinLeft2
{
    777, 4103, 189, 4096, 39, 4096, 189, 4096, 312, 4098, 39, 4096, 10, 36, 0,
    4096, 10, 0, 18, 4096, 10, 0, 36, 4096, 39, 36864, 312, 8, 4096, 312, 4096,
    39, 24576, 5, 3328, 8192, 6, 24576, 5, 3328, 8192, 6, 24576, 5, 3328, 4096,
    39
},
// cabinLeft3
{
    521, 4096, 189, 4096, 313, 4102, 189, 36864, 313, 8, 4096, 313, 4098, 175,
    4096, 10, 18, 810, 4096, 10, 18, 828, 4096, 10, 0, 846, 4096, 30
},
// cabinLeft4
{
    520, 4099, 38, 4096, 10, 18, 756, 4096, 10, 36, 774, 4096, 10, 0, 792,
    4097, 38, 8193, 5, 8192, 27, 8193, 4, 8192, 5, 4096, 38
},
// cabinLeft5
{
    776, 20483, 176, 28, 20480, 10, 54, 432, 28, 20480, 10, 90, 450, 28, 20480,
    10, 90, 468, 28, 20481, 176, 28, 24581, 46, 7168, 20481, 176, 28, 24576,
    46, 7168, 24578, 4, 7168, 24577, 46, 7168, 20480, 176, 28
},
};

std::vector<std::vector<uint16_t>> cabinCenterData{
// cabinCenter1
{
    263, 4096, 30, 8193, 5, 8192, 27, 8193, 4, 4096, 38
},
// cabinCenter2
{
    521, 4097, 312, 4096, 39, 8192, 6, 24576, 5, 3328, 8192, 6, 24576, 5, 3328,
    8192, 6, 4096, 39, 4097, 312, 4096, 39, 24576, 5, 3328, 8192, 6, 24576, 5,
    3328, 8192, 6, 24576, 5, 3328, 4096, 39
},
// cabinCenter3
{
    265, 4097, 313, 4096, 175, 8193, 45, 8192, 5, 8192, 27, 8192, 4, 4096, 30
},
// cabinCenter4
{
    264, 4096, 38, 8192, 5, 8192, 126, 8192, 27, 8193, 4, 8192, 5, 4096, 38
},
// cabinCenter5
{
    264, 20480, 176, 28, 24576, 46, 7168, 24576, 4, 7168, 24576, 21, 7168,
    24576, 4, 7168, 24577, 46, 7168, 20480, 176, 28
},
};

std::vector<std::vector<uint16_t>> cabinRightData{
// cabinRight1
{
    519, 4096, 30, 45056, 30, 5, 40, 8192, 5, 8192, 27, 8193, 4, 4096, 38,
    36864, 30, 16, 4097, 30, 4096, 10, 90, 432, 4096, 10, 90, 450, 4096, 10,
    90, 468, 4096, 38
},
// cabinRight2
{
    1033, 4097, 312, 4096, 39, 8192, 6, 24576, 5, 3328, 8192, 6, 24576, 5,
    3328, 8192, 6, 4096, 39, 36864, 312, 8, 4096, 312, 4096, 39, 24576, 5,
    3328, 8192, 6, 24576, 5, 3328, 8192, 6, 24576, 5, 3328, 4096, 39, 4096,
    189, 4096, 312, 4098, 39, 4096, 10, 0, 0, 4096, 10, 0, 18, 4096, 10, 0, 36,
    4096, 39, 4103, 189, 4096, 39
},
// cabinRight3
{
    521, 36864, 313, 8, 4096, 313, 4098, 175, 4096, 10, 36, 810, 4096, 10, 0,
    828, 4096, 10, 0, 846, 4096, 30, 4096, 189, 4096, 313, 4102, 189
},
// cabinRight4
{
    520, 4096, 38, 8193, 5, 8192, 27, 8193, 4, 8192, 5, 4100, 38, 4096, 10, 18,
    756, 4096, 10, 18, 774, 4096, 10, 36, 792, 4096, 38
},
// cabinRight5
{
    776, 20480, 176, 28, 24576, 46, 7168, 24578, 4, 7168, 24577, 46, 7168,
    20481, 176, 28, 24581, 46, 7168, 20484, 176, 28, 20480, 10, 90, 432, 28,
    20480, 10, 90, 450, 28, 20480, 10, 72, 468, 28, 20480, 176, 28
},
};
// clang-format on
} // namespace

namespace Data
{

TileBuffer
getCabin(int cabinId, int targetWidth, const std::vector<bool> &framedTiles)
{
    TileBuffer left = {cabinLeftData[cabinId].data(), framedTiles};
    TileBuffer center = {cabinCenterData[cabinId].data(), framedTiles};
    TileBuffer right = {cabinRightData[cabinId].data(), framedTiles};
    int width = left.getWidth() + right.getWidth();
    while (width < targetWidth) {
        width += center.getWidth();
    }
    int x = left.getWidth();
    left.resize(width, left.getHeight());
    for (; x < width - right.getWidth(); x += center.getWidth()) {
        for (int i = 0; i < center.getWidth(); ++i) {
            for (int j = 0; j < center.getHeight(); ++j) {
                left.getTile(x + i, j) = center.getTile(i, j);
            }
        }
    }
    for (int i = 0; i < right.getWidth(); ++i) {
        for (int j = 0; j < right.getHeight(); ++j) {
            left.getTile(x + i, j) = right.getTile(i, j);
        }
    }
    return left;
}

} // namespace Data
